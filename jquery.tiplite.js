// Generated by CoffeeScript 1.6.1

/*
tipLite v2.0 by Bruno Bernardino | 2013.03.22 | https://github.com/BrunoBernardino/TipLite
*/


(function() {
  var helpers, methods;

  helpers = {
    generateID: function() {
      var S4;
      S4 = function() {
        return (((1 + window.Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };
      return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
    }
  };

  methods = {
    init: function(options) {
      var defaults;
      defaults = {
        dataTooltip: "tiplite",
        dataPosition: "tiplitePosition",
        tooltipClass: "tipLite",
        position: "above",
        positionMargin: 10,
        animationType: "fade",
        animationSpeed: "fast",
        animationEasing: "swing",
        animationOnComplete: $.noop,
        followMouse: true
      };
      options = $.extend(defaults, options);
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data("tipLite");
        if (!data) {
          $this.data("tipLite", {
            target: $this
          });
          methods.create.call(this, options);
          $(this).on("mouseenter.tipLite", function() {
            return methods.show.call(this, options);
          });
          $(this).on("mouseleave.tipLite", function() {
            return methods.hide.call(this, options);
          });
          if (options.followMouse) {
            return $(this).on("mousemove.tipLite", function(event) {
              return methods.chaseCursor.call(this, event, options);
            });
          }
        }
      });
    },
    destroy: function() {
      $(window).off(".tipLite");
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data("tipLite");
        return $this.removeData("tipLite");
      });
    },
    create: function(options) {
      var $this, chosenPosition, data, dummyElement, generatedID, heightDifference, marginLeft, marginTop, tipLiteHTML, tipLiteID, tooltipContent, widthDifference;
      $this = $(this);
      data = $this.data("tipLite");
      chosenPosition = options.position;
      tooltipContent = "";
      if (!$this.data(options.dataTooltip)) {
        tooltipContent = $this.attr("title");
      } else {
        tooltipContent = $this.data(options.dataTooltip);
      }
      $this.attr("title", "");
      generatedID = helpers.generateID.call(this);
      tipLiteID = "tipLite-" + generatedID;
      tipLiteHTML = "<div id=\"" + tipLiteID + "\" class=\"" + options.tooltipClass + "\">" + tooltipContent + "</div>";
      $(tipLiteHTML).appendTo("body");
      data.tipLiteID = tipLiteID;
      if ($this.data(options.dataPosition)) {
        chosenPosition = $this.data(options.dataPosition);
      }
      if (!options.followMouse) {
        dummyElement = $this.clone().css({
          display: "inline",
          visibility: "hidden"
        }).appendTo("body");
        $("#" + tipLiteID).css({
          top: $this.offset().top + dummyElement.outerHeight(),
          left: $this.offset().left
        });
        marginLeft = (dummyElement.outerWidth() - $("#" + tipLiteID).outerWidth()) / 2;
        marginTop = (dummyElement.outerHeight() + $("#" + tipLiteID).outerHeight() + options.positionMargin) * -1;
        switch (chosenPosition) {
          case "left":
            marginTop = dummyElement.outerHeight() * -1;
            marginLeft = (dummyElement.outerWidth() + options.positionMargin) * -1;
            break;
          case "right":
            marginTop = dummyElement.outerHeight() * -1;
            marginLeft = dummyElement.outerWidth() + options.positionMargin;
            break;
          case "below":
            marginTop = options.positionMargin;
            break;
        }
        $("#" + tipLiteID).css({
          "margin-top": marginTop,
          "margin-left": marginLeft
        });
        if (($this.offset().top + marginTop) < 0) {
          $("#" + tipLiteID).css({
            "margin-top": 0
          });
        }
        if (($this.offset().top + marginTop + $("#" + tipLiteID).outerHeight()) > $(document).height()) {
          heightDifference = $("#" + tipLiteID).offset().top + $("#" + tipLiteID).outerHeight() - $(document).height();
          $("#" + tipLiteID).css({
            "margin-top": $("#" + tipLiteID).css("margin-top") - heightDifference
          });
        }
        if (($this.offset().left + marginLeft) < 0) {
          $("#" + tipLiteID).css({
            "margin-left": 0
          });
        }
        if ($this.offset().left + marginLeft + $("#" + tipLiteID).outerWidth() > $(document).width()) {
          widthDifference = $("#" + tipLiteID).offset().left + $("#" + tipLiteID).outerWidth() - $(document).width();
          $("#" + tipLiteID).css({
            "margin-left": $("#" + tipLiteID).css("margin-left") - widthDifference
          });
        }
        data.marginLeft = $("#" + tipLiteID).css("margin-left");
        data.marginTop = $("#" + tipLiteID).css("margin-top");
        return dummyElement.remove();
      }
    },
    show: function(options) {
      var $this, data, finalMarginLeft, tipLiteElement;
      $this = $(this);
      data = $this.data("tipLite");
      tipLiteElement = $("#" + data.tipLiteID);
      switch (options.animationType) {
        case "slide":
          finalMarginLeft = parseInt(data.marginLeft, 10);
          return tipLiteElement.stop().css({
            opacity: 0,
            display: "block",
            "margin-left": finalMarginLeft - (options.positionMargin * 2)
          }).animate({
            opacity: 1,
            "margin-left": finalMarginLeft
          }, options.animationSpeed, options.animationEasing, options.animationOnComplete);
        default:
          return tipLiteElement.stop().fadeIn(options.animationSpeed, options.animationEasing, options.animationOnComplete);
      }
    },
    hide: function() {
      var $this, data;
      $this = $(this);
      data = $this.data("tipLite");
      return $("#" + data.tipLiteID).stop().hide();
    },
    hideAllTipLites: function(options) {
      return $("." + options.tooltipClass).stop().hide();
    },
    chaseCursor: function(event, options) {
      var $this, chosenPosition, data, leftPosition, tipLiteElement, topPosition;
      $this = $(this);
      data = $this.data("tipLite");
      chosenPosition = options.position;
      topPosition = 0;
      leftPosition = 0;
      if ($this.data(options.dataPosition)) {
        chosenPosition = $this.data(options.dataPosition);
      }
      tipLiteElement = $("#" + data.tipLiteID);
      leftPosition = event.pageX + options.positionMargin;
      switch (chosenPosition) {
        case "below":
          topPosition = event.pageY + options.positionMargin;
          break;
        default:
          topPosition = event.pageY - options.positionMargin - tipLiteElement.outerHeight();
      }
      return tipLiteElement.css({
        top: topPosition,
        left: leftPosition
      });
    }
  };

  $.fn.tipLite = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      return $.error("Method " + method + " does not exist on jQuery.tipLite");
    }
  };

}).call(this);
